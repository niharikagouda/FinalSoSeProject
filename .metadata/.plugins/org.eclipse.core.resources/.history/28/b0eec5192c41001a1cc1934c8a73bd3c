package com.italia.soaproject.rest.library;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.italia.soaproject.rest.library.database.BookDatabase;
import com.italia.soaproject.rest.library.database.BookDatabaseImpl;
import com.italia.soaproject.rest.library.model.Book;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
public class LibraryController {
	
	BookDatabase udb = new BookDatabaseImpl();
	
	
	@ApiOperation(value = "Get list of Books by keyword which can match author, book name, publication and category", response = List.class)
	@ApiResponses(value = { 
	            @ApiResponse(code = 200, message = "Success|OK"),
	            @ApiResponse(code = 401, message = "not authorized!"), 
	            @ApiResponse(code = 403, message = "forbidden!!!"),
	            @ApiResponse(code = 404, message = "not found!!!") })
	@RequestMapping(value = "/searchBooks/{keyword}", method = RequestMethod.GET)
    public List<Book> searchBooks(@PathVariable("keyword") String keyword) {
		
		if(keyword == null) {
			return new ArrayList<Book>();
		}
		
		return udb.listBooks(keyword);
		
    }
	
	
	@ApiOperation(value = "Map book to selected user", response = Boolean.class)
	@ApiResponses(value = { 
	            @ApiResponse(code = 200, message = "Success|OK"),
	            @ApiResponse(code = 401, message = "not authorized!"), 
	            @ApiResponse(code = 403, message = "forbidden!!!"),
	            @ApiResponse(code = 404, message = "not found!!!") })
	@RequestMapping(value = "/issueBook", method = RequestMethod.POST)
    public Boolean issueBook(@RequestParam(name = "bookId") String bookId, @RequestParam(name = "userId") String userId) {
		
		if(bookId == null || userId == null) {
			return false;
		}
		
		Integer user = Integer.parseInt(userId);
		
		if(udb.isAlreadyIssued(bookId, user)) {
			return false;
		}
		
		return udb.issueBook(bookId, user);
		
	}

	
	
		
		
		
		
		
		
}		
    
	
	
	
	
	
	
	


